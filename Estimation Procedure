library(survival)
library(Rcpp)
library(parallel)
library(Brobdingnag)


rm(list = ls())

## the cpp file should be located in the working directory
sourceCpp("frailty_LT_age_weights_brob.cpp", verbose=TRUE)


############################ Data Analysis ####################################

################ Function Arguments ##################
# z12 - covariate matrix (n_subjects X n_covariates) for the healthy-disease process
# z13 - covariate matrix (n_subjects X n_covariates) for the healthy-dead process
# z23 - covariate matrix (n_subjects X n_covariates) for the disease-dead process
# obs_times1 - minimum of disease time, death time(from healthy state) or censoring time
# obs_times2 - minimum of death time (from diseased state) and censoring. If not applicable (if the person died or was censored directly from healthy state) should get 0.
# R - recruitment(truncation) age. Defaults to 0 (no truncation)
# delta1 - TRUE if obs_times1 = disease time, FALSE otherwise
# delta2 - TRUE if obs_times1 = death time, FALSE otherwise
# delta3 - TRUE if obs_times2 = death time, FALSE otherwise
# RecL - minimal recruitment age. default value is 0.
# marginal_13_haz - the marginal hazard rates, across a grid until recL. defaults to NULL. has to be provided if recL is not 0.
# marginal_13_grid - the marginal hazard grid times corresponding to the marginal hazard rates. defaults to NULL. has to be provided if recL is not 0.
# n_Bootstrap - number of required weighted bootstrap samples. Defaults to none. Weights are randomly sampled from the standard exponential distribution.
# Tol - tolerance for the iterative algorithm. If |new_loglikelikehood - last_loglikelihood|/|last_loglikelihood| < tol, the algorithm stops and declares convergence. Defaults to 0.001.
# max_Iter - maximal number of iterations, after which the algorithm stops and declares non-convergence. Defaults to 100.
# initial_pars - a vector with starting points for theta+regression parameters. Defaults to naive Cox regression with LT. Theta value defaults to 0.1.
# initial_H - a list with 3 starting functions for H012,H013,H023. Defaults to naive Breslow estimator with LT. 
# seed - controlling the seed for the weights generation. Defaults to 1
# save_address - a local address to save interim results. After each bootstrap round the results will be saved to the address provided. The address should direct to a folder, where 5 files will be saved: H012,H013,H023,parameters,convergence. 
# check_times - a vector of times to be inserted into the H0 functions, for saving the results. Defaults to a grid of equally spaced values between 0 and max(observed time)
# inf_f - inflation factor. If, in order to save computation time, only a sub-sample of the censored observations is used (a case-cohort design), an iflation factor should be provided for the sampled observations (an IPW approach). Defaults to 1 (all censored observations are used).

estimate_all <- function(z12,z13,z23,obs_times1,obs_times2,delta1,delta2,delta3,R=rep(0,length(obs_times1)),RecL=0,marginal_13_haz=NULL,marginal_13_grid=NULL,n_Bootstrap=0,tol=0.001,max_Iter=100,initial_pars=NULL,initial_H=NULL,seed=1,save_address=NULL,name=NULL,check_times=seq(0,max(obs_times1,obs_times2),length.out = 100),inf_f = 1)
{
  #Laplace Transform and its derivatives:
  
  phi <- function(theta,s) (1+theta*s)^(-1/theta)
  phi_tag <- function(theta,s) -(1+theta*s)^(-(theta + 1) / theta)
  phi_tag2 <- function(theta,s) (theta+1) * (1+theta*s)^(-(2*theta + 1)/theta)
  
  #Derivative functions for the likelihood gradient arugments:
  
  deri_A_by_g <- function(dA,Ai,theta_hat,z_mat,N_t=N_tau,delta=NULL) {
    dA = as.matrix(dA)
    if(is.null(delta)) {delta <- rep(1,length(Ai))}
    ret_mat <- NULL
    ret <-  (N_t == 0)* -1*(1/(1 + theta_hat*Ai)) + (N_t == 1) * -1*((theta_hat + 1)/(1 + theta_hat*Ai)) +(N_t == 2) * -1*((2*theta_hat + 1)/(1 + theta_hat*Ai))
    for(j in 1:ncol(dA))
    {
      ret_mat <- cbind(ret_mat,as.numeric(sign(as.matrix(z_mat)[,j])*delta*ret*as.brob(exp(1))^dA[,j]))
    }
    return(ret_mat)
  }
  
  deri_A_by_theta <- function(ds,s,theta_hat,N_t=N_tau) {
    ret = (N_t == 0) * ((log(1 + theta_hat*s)/(theta_hat^2)) - (theta_hat*ds + s)/(theta_hat*(1 + theta_hat*s)))
    ret = ret + (N_t == 1) * ((-(theta_hat+1)*theta_hat^2*ds-theta_hat*s*(-log(1 + theta_hat*s) + theta_hat + 1) + log(1 + theta_hat*s))/
                                ((theta_hat^2)*(1 + theta_hat*s)))  
    ret = ret + (N_t == 2) * (-(2*theta_hat + 1)*(theta_hat*ds + s)/(theta_hat * (1 + theta_hat*s)) -
                                (-(2*theta_hat + 1)/(theta_hat^2) + 2/theta_hat) * log(1 + theta_hat*s) + 1/(theta_hat+1))               
    return(ret)
  }
  
  
  deri_lnastar_by_g <- function(g,z,theta_hat,H,times,index_lst,add_z=TRUE) {
    Htimes = H(times)[index_lst[,2]]
    if(length(g) == 1) tmp_z = z[index_lst[,1]]
    else tmp_z = z[index_lst[,1],]
    if(length(g) == 1) gz_mat = tmp_z %*% t(as.vector(g))
    else gz_mat = tmp_z %*% as.vector(g)
    ret = tmp_z*matrix(rep(theta_hat*exp(gz_mat)*Htimes,length(g)),ncol=length(g))
    if (add_z) {return(tmp_z + ret)}
    return(ret)
  }
  
  
  deri_lnastar_by_theta <- function(g_a,g_b,z_a,z_b,theta_hat,H_a,H_b,times,index_lst) {
    Htimes_a = H_a(times)[index_lst[,2]]
    Htimes_b = H_b(times)[index_lst[,2]]
    if(length(g_a) == 1) gz_mat_a = z_a[index_lst[,1]] %*% t(as.vector(g_a))
    else gz_mat_a = z_a[index_lst[,1],] %*% as.vector(g_a)
    if(length(g_b) == 1) gz_mat_b = z_b[index_lst[,1]] %*% t(as.vector(g_b))
    else gz_mat_b = z_b[index_lst[,1],] %*% as.vector(g_b)
    return(exp(gz_mat_a)*Htimes_a + exp(gz_mat_b)*Htimes_b)	
  }
  
  deri_lnastar_by_g_23 <- function(g,z,theta_hat,H,times,index_lst) {
    Htimes = H(times)[index_lst[,2]]
    if(length(g) == 1) tmp_z = z[index_lst[,1]]
    else tmp_z = z[index_lst[,1],]
    if(length(g) == 1) gz_mat = tmp_z %*% t(as.vector(g))
    else gz_mat = tmp_z %*% as.vector(g)
    return(tmp_z + tmp_z*matrix(rep((theta_hat/(1 + theta_hat))*exp(gz_mat)*Htimes,length(g)),ncol=length(g)))
  }
  
  
  deri_lnastar_by_theta_23 <- function(g,z,theta_hat,H,times,index_lst) {
    Htimes = H(times)[index_lst[,2]]
    if(length(g) == 1) gz_mat = z[index_lst[,1]] %*% t(as.vector(g))
    else gz_mat = z[index_lst[,1],] %*% as.vector(g)
    return((exp(gz_mat)*Htimes)/((1 + theta_hat)^2) - (1/(1 + theta_hat)))	
  }
  
  
  Likelihood_grad <- function(par)
  {
    theta_hat <- par[1]
    g12_hat <- par[2:(z12dim+1)]
    g13_hat <- par[(2+z12dim):(1+z12dim+z13dim)]
    g23_hat <- par[(2+z12dim+z13dim):((1+z12dim+z13dim+z23dim))]
    
    g12z <- if(z12dim == 1) {g12_hat*z12} else {z12 %*% g12_hat}
    g13z <- if(z13dim == 1) {g13_hat*z13} else {z13 %*% g13_hat}
    g23z <- if(z23dim == 1) {g23_hat*z23} else {z23 %*% g23_hat}
    
    by_g12 <- colSums(weights12 * deri_lnastar_by_g(g12_hat,z12,theta_hat,H012_estimated,sorted_ev_12_postR, cbind(which(delta1postR),rank(V[delta1postR])),TRUE))
    by_g13 <- colSums(weights12 * deri_lnastar_by_g(g13_hat,z13,theta_hat,H013_estimated,sorted_ev_12_postR, cbind(which(delta1postR),rank(V[delta1postR])),FALSE))
    by_theta <- sum(weights12 * deri_lnastar_by_theta(g12_hat,g13_hat,z12,z13,theta_hat,H012_estimated,H013_estimated,sorted_ev_12_postR, cbind(which(delta1postR),rank(V[delta1postR]))))
    
    by_g13 <- by_g13 + colSums(weights13 * (deri_lnastar_by_g(g13_hat,z13,theta_hat,H013_estimated,sorted_ev_13, cbind(which(delta2),rank(V[delta2])),TRUE)))
    by_g12 <- by_g12 + colSums(weights13 * (deri_lnastar_by_g(g12_hat,z12,theta_hat,H012_estimated,sorted_ev_13, cbind(which(delta2),rank(V[delta2])),FALSE)))
    by_theta <- by_theta + sum(weights13 * deri_lnastar_by_theta(g13_hat,g12_hat,z13,z12,theta_hat,H013_estimated,H012_estimated,sorted_ev_13, cbind(which(delta2),rank(V[delta2]))))
    
    by_g23 <- colSums(weights23 * deri_lnastar_by_g_23(g23_hat,z23,theta_hat,H023_estimated,sorted_ev_23, cbind(which(delta3),rank(W[delta3]))))
    by_theta <- by_theta + sum(weights23 * deri_lnastar_by_theta_23(g23_hat,z23,theta_hat,H023_estimated,sorted_ev_23, cbind(which(delta3),rank(W[delta3]))))
    
    A12_derive <- derive_A_combined(theta_hat, as.matrix(z12), as.matrix(z13), g12_hat, g13_hat, c(0,H012_estimated(sorted_joined)),c(0,H013_estimated(sorted_joined)), h012_in_grid, V, sorted_joined)
    A13_derive <- derive_A_combined(theta_hat, as.matrix(z13), as.matrix(z12), g13_hat, g12_hat, c(0,H013_estimated(sorted_joined)),c(0,H012_estimated(sorted_joined)), h013_in_grid, V, sorted_joined) 
    A23_derive_W <- derive_A_combined_23(theta_hat, as.matrix(z23), g23_hat, c(0,H023_estimated(sorted_ev_23)),slopes_23, W, sorted_ev_23) 
    A23_derive_V <- derive_A_combined_23(theta_hat, as.matrix(z23), g23_hat, c(0,H023_estimated(sorted_ev_23)),slopes_23, V, sorted_ev_23)  
    A12_R <- derive_A_combined(theta_hat, as.matrix(z12), as.matrix(z13), g12_hat, g13_hat, c(0,H012_estimated(sorted_joined)),c(0,H013_estimated(sorted_joined)), h012_in_grid, R, sorted_joined)
    A13_R <- derive_A_combined(theta_hat, as.matrix(z13), as.matrix(z12), g13_hat, g12_hat, c(0,H013_estimated(sorted_joined)),c(0,H012_estimated(sorted_joined)), h013_in_grid, R, sorted_joined) 
    A23_R <- derive_A_combined_23(theta_hat, as.matrix(z23), g23_hat, c(0,H023_estimated(sorted_ev_23)),slopes_23, R, sorted_ev_23)  
    
    A_all <- as.brob(exp(1))^A12_derive[,1] + as.brob(exp(1))^A13_derive[,1] + as.brob(exp(1))^A23_derive_W[,1] - delta1*as.brob(exp(1))^(A23_derive_V[,1])
    A_all_denom <- VpostR* (as.brob(exp(1))^A12_R[,1] + as.brob(exp(1))^A13_R[,1]) +
      (!VpostR)*(as.brob(exp(1))^A12_derive[,1] + as.brob(exp(1))^A13_derive[,1] + as.brob(exp(1))^A23_R[,1] - as.brob(exp(1))^A23_derive_V[,1])
    
    by_g12 <- by_g12 + colSums(weights * deri_A_by_g(A12_derive[,3:(2 + z12dim)],A_all,theta_hat,z12))
    by_g13 <- by_g13 + colSums(weights * deri_A_by_g(A12_derive[,(3 + z12dim):(2 + z12dim + z13dim)],A_all,theta_hat,z13))
    by_g13 <- by_g13 + colSums(weights * deri_A_by_g(A13_derive[,3:(2 + z13dim)],A_all,theta_hat,z13))
    by_g12 <- by_g12 + colSums(weights * deri_A_by_g(A13_derive[,(3 + z13dim): (2 + z12dim + z13dim)],A_all,theta_hat,z12))
    by_g23 <- by_g23 + colSums(weights * deri_A_by_g(A23_derive_W[,4:(3 + z23dim)],A_all,theta_hat,z23))
    by_g23 <- by_g23 - colSums(weights * deri_A_by_g(A23_derive_V[,4:(3 + z23dim)],A_all,theta_hat,z23,delta=delta1))
    
    by_theta <- by_theta + sum(weights * deri_A_by_theta(as.brob(exp(1))^A12_derive[,2] + as.brob(exp(1))^A13_derive[,2] + as.brob(exp(1))^A23_derive_W[,2] - as.brob(exp(1))^A23_derive_W[,3] - delta1*as.brob(exp(1))^A23_derive_V[,2] + delta1*as.brob(exp(1))^A23_derive_V[,3],A_all,theta_hat))
    
    N_tau_R <- as.integer((!VpostR))
    if(sum(!VpostR) > 0)
    {
      
      by_g12 <- by_g12 - colSums(as.matrix(weights_preR * deri_A_by_g(A12_derive[,3:(2 + z12dim)],A_all_denom,theta_hat,z12,N_tau_R)[!VpostR,]))
      by_g13 <- by_g13 - colSums(as.matrix(weights_preR * deri_A_by_g(A12_derive[,(3 + z12dim):(2 + z12dim + z13dim)],A_all_denom,theta_hat,z13,N_tau_R)[!VpostR,]))
      by_g13 <- by_g13 - colSums(as.matrix(weights_preR * deri_A_by_g(A13_derive[,3:(2 + z13dim)],A_all_denom,theta_hat,z13,N_tau_R)[!VpostR,]))
      by_g12 <- by_g12 - colSums(as.matrix(weights_preR * deri_A_by_g(A13_derive[,(3 + z13dim): (2 + z12dim + z13dim)],A_all_denom,theta_hat,z12,N_tau_R)[!VpostR,]))
      
      by_g23 <- by_g23 - colSums(weights * deri_A_by_g(A23_R[,4:(3 + z23dim)],A_all_denom,theta_hat,z23,N_tau_R,delta=(!VpostR)))
      by_g23 <- by_g23 + colSums(weights * deri_A_by_g(A23_derive_V[,4:(3 + z23dim)],A_all_denom,theta_hat,z23,N_tau_R,delta=(!VpostR)))
      
      by_g12 <- by_g12 - colSums(as.matrix(weights_postR * deri_A_by_g(A12_R[,3:(2 + z12dim)],A_all_denom,theta_hat,z12,N_tau_R)[VpostR,]))
      by_g13 <- by_g13 - colSums(as.matrix(weights_postR * deri_A_by_g(A13_R[,3:(2 + z13dim)],A_all_denom,theta_hat,z13,N_tau_R)[VpostR,]))
      by_g13 <- by_g13 - colSums(as.matrix(weights_postR * deri_A_by_g(A12_R[,(3 + z12dim):(2 + z12dim + z13dim)],A_all_denom,theta_hat,z13,N_tau_R)[VpostR,]))
      by_g12 <- by_g12 - colSums(as.matrix(weights_postR * deri_A_by_g(A13_R[,(3 + z13dim): (2 + z12dim + z13dim)],A_all_denom,theta_hat,z12,N_tau_R)[VpostR,]))
      
      by_theta <- by_theta - sum(weights_preR * deri_A_by_theta(as.brob(exp(1))^A12_derive[,2] + as.brob(exp(1))^A13_derive[,2] + as.brob(exp(1))^A23_R[,2] - as.brob(exp(1))^A23_R[,3] - as.brob(exp(1))^A23_derive_V[,2] + as.brob(exp(1))^A23_derive_V[,3],A_all_denom,theta_hat,N_tau_R)[!VpostR])
      by_theta <- by_theta - sum(weights_postR * deri_A_by_theta(as.brob(exp(1))^A12_R[,2] + as.brob(exp(1))^A13_R[,2],A_all_denom,theta_hat,N_tau_R)[VpostR])
    }
    ret <- c(as.numeric(by_theta), by_g12, by_g13, by_g23)
    
    return(-ret)
  }
  
  
  ##### log-Likelihood
  Likelihood <- function(par)
  {
    theta_hat <- par[1]
    g12_hat <- par[2:(z12dim+1)]
    g13_hat <- par[(2+z12dim):(1+z12dim+z13dim)]
    g23_hat <- par[(2+z12dim+z13dim):((1+z12dim+z13dim+z23dim))]
    
    g12z <- if(z12dim == 1) {g12_hat*z12} else {z12 %*% g12_hat}
    g13z <- if(z13dim == 1) {g13_hat*z13} else {z13 %*% g13_hat}
    g23z <- if(z23dim == 1) {g23_hat*z23} else {z23 %*% g23_hat}
    
    lnastar12_postR <- (g12z[match12] + theta_hat*(exp(g12z[match12])*H012_estimated(sorted_ev_12_postR) + exp(g13z[match12])*H013_estimated(sorted_ev_12_postR))) * weights_events_12
    lnastar13 <- (g13z[match13] + theta_hat*(exp(g12z[match13])*H012_estimated(sorted_ev_13) + exp(g13z[match13])*H013_estimated(sorted_ev_13))) * weights_events_13
    lnastar23 <- (g23z[match23] + theta_hat/(1+theta_hat) * exp(g23z[match23])*H023_estimated(sorted_ev_23) - log(1+theta_hat)) * weights_events_23
    
    A12_V <- as.brob(exp(1)) ^ as.vector(get_ln_A_col(exp(g12z),exp(g13z),theta_hat,V,h012_in_grid,c(0,H012_estimated(sorted_joined)),c(0,H013_estimated(sorted_joined)),sorted_joined))
    A13_V <- as.brob(exp(1)) ^ as.vector(get_ln_A_col(exp(g13z),exp(g12z),theta_hat,V,h013_in_grid,c(0,H013_estimated(sorted_joined)),c(0,H012_estimated(sorted_joined)),sorted_joined))
    A23_V <- as.brob(exp(1)) ^ as.vector(get_ln_A_col_23(exp(g23z),theta_hat,V,slopes_23,c(0,H023_estimated(sorted_ev_23)),sorted_ev_23))
    A23_W <- as.brob(exp(1)) ^ as.vector(get_ln_A_col_23(exp(g23z),theta_hat,W,slopes_23,c(0,H023_estimated(sorted_ev_23)),sorted_ev_23))
    A12_R <- as.brob(exp(1)) ^ as.vector(get_ln_A_col(exp(g12z),exp(g13z),theta_hat,R,h012_in_grid,c(0,H012_estimated(sorted_joined)),c(0,H013_estimated(sorted_joined)),sorted_joined))
    A13_R <- as.brob(exp(1)) ^ as.vector(get_ln_A_col(exp(g13z),exp(g12z),theta_hat,R,h013_in_grid,c(0,H013_estimated(sorted_joined)),c(0,H012_estimated(sorted_joined)),sorted_joined))
    A23_R <- as.brob(exp(1)) ^ as.vector(get_ln_A_col_23(exp(g23z),theta_hat,R,slopes_23,c(0,H023_estimated(sorted_ev_23)),sorted_ev_23))
    
    A_all_num <- (A12_V+A13_V+A23_W-delta1*A23_V) 
    A_all_denom <- VpostR*(A12_R+A13_R)+(!VpostR)*(A12_V + A13_V + A23_R - A23_V)
    
    phi_num_0 <- log(phi(theta_hat,A_all_num[N_tau == 0])) * weightsN0
    phi_num_1 <- log(-(phi_tag(theta_hat,A_all_num[N_tau == 1]))) * weightsN1
    phi_num_2 <- log(phi_tag2(theta_hat,A_all_num[N_tau == 2])) * weightsN2
    phi_denom_0 <- log(phi(theta_hat,A_all_denom[VpostR])) * weights_postR
    if(sum(!VpostR)>0)
    {
      phi_denom_1 <- log(-(phi_tag(theta_hat,A_all_denom[!VpostR]))) * weights_preR
    }
    else
    {
      phi_denom_1 <- 0
    }
    
    ret <- sum(lnastar12_postR,lnastar13,lnastar23,phi_num_0,phi_num_1,phi_num_2) - sum(phi_denom_0,phi_denom_1)
    
    return(-(ret))
  }
  
  #sanity checks:
  if(RecL != 0)
  {
    if(is.null(marginal_13_haz)) {stop("Marginal death hazard should be provided")}
    if(is.null(marginal_13_grid)) {stop("Marginal death grid times should be provided")}
    if(length(marginal_13_haz) != length(marginal_13_grid)) {stop("Marginal hazard rates should be in the same length of the marginal grid times vector")}
  }
  
  
  #renaming and sorting
  n <- length(obs_times1)
  V <- obs_times1
  W <- obs_times2
  VpostR <- (V >= R)
  delta1postR <- delta1 & VpostR
  
  
  z12dim <- if(is.null(ncol(z12))) 1 else ncol(z12)
  z13dim <- if(is.null(ncol(z13))) 1 else ncol(z13)
  z23dim <- if(is.null(ncol(z23))) 1 else ncol(z23)
  sumdim <- z12dim+z13dim+z23dim
  
  n_ev_12 <- sum(delta1)
  n_ev_12_LT <- sum(delta1postR)
  n_ev_13 <- sum(delta2)
  n_ev_23 <- sum(delta3)
  
  sorted_ev_12 <- sort(V[delta1])
  sorted_ev_12_postR <- sort(V[delta1postR])
  sorted_ev_12_R <- R[delta1postR][order(V[delta1postR])]
  sorted_ev_13 <- sort(V[delta2])
  sorted_ev_13_R <- R[delta2][order(V[delta2])]
  sorted_ev_23 <- sort(W[delta3])
  sorted_ev_23_R <- R[delta3][order(W[delta3])]
  
  sorted_joined <- sort(c(sorted_ev_12_postR,sorted_ev_13))
  
  is_12 <- sorted_joined %in% sorted_ev_12_postR
  
  match12 <- match(sorted_ev_12_postR,V)
  match13 <- match(sorted_ev_13,V)
  match23 <- match(sorted_ev_23,W)
  
  N_1_tau <- delta1 + delta2
  N_tau <- delta1 + delta2 + delta3
  
  #empty arrays:
  par_res <- H012res <- H013res <- H023res <- conv_res <- NULL
  counter <- 1
  for(j in (1:(1+n_Bootstrap)))
  {
    
    #weights generation:
    while(TRUE)
    {
      set.seed(seed + counter)
      
      exp_var <- rexp(n,1)
      if(j == 1) {weights <- ifelse(N_1_tau == 0, inf_f, 1)} else {weights <- ifelse(N_1_tau == 0, inf_f*exp_var, exp_var)}
      weights12 <- weights[delta1postR] ; weights13 <- weights[delta2] ; weights23 <- weights[delta3]
      weightsN0 <- weights[N_tau == 0] ; weightsN1 <- weights[N_tau == 1] ; weightsN2 <- weights[N_tau == 2]
      weights_preR <- weights[!VpostR] ; weights_postR <- weights[VpostR]
      weights_events_12 <- weights[match(sorted_ev_12_postR,V)]
      weights_events_13 <- weights[match(sorted_ev_13,V)]
      weights_events_23 <- weights[match(sorted_ev_23,W)]
      
      #initialization:
      if(is.null(initial_pars))
      {
        theta_hat <- 0.1
        #warnings are invoked becaused of prevalence cases. They are omitted from the model anyway so the warning is irrelvent and therefore suppressed.
        model12_0 <- suppressWarnings(coxph(Surv(R,V,event = delta1) ~ z12,weights = weights,subset = VpostR))
        model13_0 <- suppressWarnings(coxph(Surv(R,V,event = delta2) ~ z13,weights = weights,subset = VpostR))
        model23_0 <- suppressWarnings(coxph(Surv(pmax(R,V),W,event = delta3) ~ z23,weights = weights,subset = delta1))
        
        g12_hat <- coef(model12_0)
        g13_hat <- coef(model13_0)
        g23_hat <- coef(model23_0)
      }
      else
      {
        theta_hat <- initial_pars[1]
        g12_hat <- initial_pars[2:(z12dim+1)]
        g13_hat <- initial_pars[(2+z12dim):(1+z12dim+z13dim)]
        g23_hat <- initial_pars[(2+z12dim+z13dim):((1+z12dim+z13dim+z23dim))]
      }
      
      if(is.null(initial_H))  #if no initial H functions were provided, naive estimates are computed
      {
        baseHazCox12 <- suppressWarnings(basehaz(model12_0,centered = F))
        H012_estimated <- stepfun(baseHazCox12$time,c(0,baseHazCox12$hazard))
        baseHazCox13 <- suppressWarnings(basehaz(model13_0,centered = F))
        H013_estimated <- stepfun(baseHazCox13$time,c(0,baseHazCox13$hazard))
        baseHazCox23 <- suppressWarnings(basehaz(model23_0,centered = F))
        H023_estimated <- stepfun(baseHazCox23$time,c(0,baseHazCox23$hazard))
      }
      else
      {
        H012_estimated <- initial_H[[1]]
        H013_estimated <- initial_H[[2]]
        H023_estimated <- initial_H[[3]]
      }
      
      slopes <- (H012_estimated(sorted_ev_12_postR) - H012_estimated(c(0,sorted_ev_12_postR[-n_ev_12_LT]))) / diff(c(0,sorted_ev_12_postR))
      h012_fun <- stepfun(sorted_ev_12_postR, c(slopes,slopes[n_ev_12_LT]),right=TRUE)
      h012_in_grid <- h012_fun(sorted_joined)
      
      slopes <- (H013_estimated(sorted_ev_13) - H013_estimated(c(0,sorted_ev_13[-n_ev_13]))) / diff(c(0,sorted_ev_13))
      h013_fun <- stepfun(sorted_ev_13, c(slopes,slopes[n_ev_13]),right=TRUE)
      h013_in_grid <- h013_fun(sorted_joined)
      
      slopes_23 <- (H023_estimated(sorted_ev_23) - H023_estimated(c(0,sorted_ev_23[-n_ev_23]))) / diff(c(0,sorted_ev_23))
      
      ## iterarive algorithm starts:
      conv_cond <- T
      iter <- 0
      conv_ind <- T #indicator for whether the procedure converged
      new_loglike <- 0
      fail <-  F
      while(conv_cond)
      {
        iter <- iter + 1
        
        g12z <- if(z12dim == 1) {g12_hat*z12} else {z12 %*% g12_hat}
        g13z <- if(z13dim == 1) {g13_hat*z13} else {z13 %*% g13_hat}
        g23z <- if(z23dim == 1) {g23_hat*z23} else {z23 %*% g23_hat}
        
        #part 1: estimating H013 prior to recL based on the marginal data
        if(RecL!=0)
        {
          len_marg_grid <- length(marginal_13_haz)
          eHegz_mat <- exp(-H013_estimated(marginal_13_grid) %*% t(exp(g13z)))
          eHegz_sums <- rowSums(eHegz_mat * matrix(weights,nrow=len_marg_grid ,ncol = n,byrow = T))
          dH13_bef <- marginal_13_haz * eHegz_sums / rowSums(eHegz_mat * rep(exp(g13z),each=len_marg_grid) * matrix(weights,nrow = len_marg_grid,ncol = n,byrow = T))
        }
        
        #part 2:
        
        #estimating the H0 functions:
        
        tmp <- estimate_H_JK(g12z,g13z,theta_hat, c(0,H012_estimated(sorted_joined)),c(0,H013_estimated(sorted_joined)),
                             h012_in_grid,h013_in_grid,is_12,V,N_1_tau,sorted_joined,R,weights,weights12,weights13)
        dH12 <- tmp$h12
        dH13_af <- tmp$h13
        
        A_1_tau <- exp(get_ln_A_col(exp(g12z),exp(g13z),theta_hat,V,h012_in_grid,c(0,H012_estimated(sorted_joined)),c(0,H013_estimated(sorted_joined)),sorted_joined)) +
          exp(get_ln_A_col(exp(g13z),exp(g12z),theta_hat,V,h013_in_grid,c(0,H013_estimated(sorted_joined)),c(0,H012_estimated(sorted_joined)),sorted_joined)) -
          exp(get_ln_A_col_23(exp(g23z),theta_hat,V,slopes_23,c(0,H023_estimated(sorted_ev_23)),sorted_ev_23))
        dH23 <- estimate_H_23(g23z,theta_hat, c(0,H023_estimated(sorted_ev_23)),sorted_ev_23,W,V,N_1_tau,A_1_tau,R,weights,weights23)
        
        H012_estimated <- stepfun(sorted_ev_12_postR,c(0,cumsum(dH12)))
        if(RecL != 0)
        {
          H013_estimated <- stepfun(c(marginal_13_grid,sorted_ev_13),c(0,cumsum(c(dH13_bef*(recL/len_marg_grid),dH13_af))))
        }
        else
        {
          H013_estimated <- stepfun(sorted_ev_13,c(0,cumsum(dH13_af)))
        }
        H023_estimated <- stepfun(sorted_ev_23,c(0,cumsum(dH23)))
        
        slopes <- (H012_estimated(sorted_ev_12_postR) - H012_estimated(c(0,sorted_ev_12_postR[-n_ev_12_LT]))) / diff(c(0,sorted_ev_12_postR))
        h012_fun <- stepfun(sorted_ev_12_postR, c(slopes,slopes[n_ev_12_LT]),right=TRUE)
        h012_in_grid <- h012_fun(sorted_joined)
        
        slopes <- (H013_estimated(sorted_ev_13) - H013_estimated(c(0,sorted_ev_13[-n_ev_13]))) / diff(c(0,sorted_ev_13))
        h013_fun <- stepfun(sorted_ev_13, c(slopes,slopes[n_ev_13]),right=TRUE)
        h013_in_grid <- h013_fun(sorted_joined)
        
        slopes_23 <- (H023_estimated(sorted_ev_23) - H023_estimated(c(0,sorted_ev_23[-n_ev_23]))) / diff(c(0,sorted_ev_23))
        
        #maximizing the log-likelihood:
        
        res <- try(optim(par=c(theta_hat,g12_hat,g13_hat,g23_hat),Likelihood,method ="L-BFGS-B", gr = Likelihood_grad,lower = c(0.000001,rep(-Inf,sumdim))))
        if(class(res) == "try-error")
        {
          counter <- counter + 1
          fail <- T
          break
        }
        res_pars <- res$par
        theta_hat <- res_pars[1]
        g12_hat <- res_pars[2:(z12dim+1)]
        g13_hat <- res_pars[(2+z12dim):(1+z12dim+z13dim)]
        g23_hat <- res_pars[(2+z12dim+z13dim):((1+z12dim+z13dim+z23dim))]
        
        #calculating the stopping criterion
        last_loglike <- new_loglike
        new_loglike <- res$value
        loglikelihood_rel_change <- abs(new_loglike - last_loglike)/abs(last_loglike) 
        conv_cond <- loglikelihood_rel_change > tol
        
        if(iter == max_Iter)
        {
          conv_ind <- F
          break
        }
      }
      
      if(j==1) #updating the starting points for the bootstrap samples
      {
        initial_pars <- c(theta_hat,g12_hat,g13_hat,g23_hat)
        initial_H <- list(H012_estimated,H013_estimated,H023_estimated)
      }
      
      if(fail == F)
      {
        H012res <- rbind(H012res,H012_estimated(check_times))
        H013res <- rbind(H013res,H013_estimated(check_times))
        H023res <- rbind(H023res,H023_estimated(check_times))
        par_res <- rbind(par_res,c(theta_hat,g12_hat,g13_hat,g23_hat))
        conv_res <- c(conv_res,conv_ind)
        
        if(!is.null(save_address))
        {
          write.csv(H012res,paste0(save_address,"/H012res_",name,".csv"))
          write.csv(H013res,paste0(save_address,"/H013res_",name,".csv"))
          write.csv(H023res,paste0(save_address,"/H023res_",name,".csv"))
          write.csv(par_res,paste0(save_address,"/parres_",name,".csv"))
          write.csv(conv_res,paste0(save_address,"/convres_",name,".csv"))
        }
        counter <- counter + 1
        break
      }
    }
  }
  list(H012=H012res,H013=H013res,H023=H023res,pars=par_res,convergence=conv_res)
  
}

